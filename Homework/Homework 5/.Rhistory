table(Default$default)
library(ggplot2)
qplot(x=default, y=balance, data = Default, col= default, main = 'Boxplot 1') +
geom_boxplot()
qplot(x=student, y=balance, data = Default, col= student, main = 'Boxplot 2') +
geom_boxplot()
qplot(x=default, y=income, data = Default, col= default, main = 'Boxplot 3') +
geom_boxplot()
mosaicplot(~ student + default, data=Default, main = "Mosaic Plot", col='lightblue')
pairs(~default + balance + income + student, data = Default, col = Default$default)
# Logistic regression
logit1.fit <- glm(default ~ balance,
family=binomial(link='logit'),data = Default)
summary(logit1.fit)
# Calculate predicted probability
logit1.prob <- predict(logit1.fit, type = "response")
plot(x = Default$balanc, y = ifelse(Default$default == "Yes", 1, 0),
col = "orange", xlab = "Balance", ylab = "Probability of Default")
points(x = Default$balance[order(Default$balance)],
y = logit1.prob[order(Default$balance)],
type = "l", col="blue", lwd = 2)
# Logistic regression
logit2.fit <- glm(default ~ student,
family=binomial(link='logit'),data = Default)
summary(logit2.fit)
# Logistic regression
logit3.fit <- glm(default ~ balance + student,
family=binomial(link='logit'),data = Default)
summary(logit3.fit)
# Logistic regression
logit.fit <- glm(default ~ balance + income + student,
family=binomial(link='logit'),data = Default)
summary(logit.fit)
# Get coefficient estimates
coef(logit.fit)
# Get coefficient estimates with statistics
summary(logit.fit)$coef
# Get p-values for all coefficient estimates
summary(logit.fit)$coef[,4]
library(stargazer)
stargazer(logit1.fit, logit2.fit, logit3.fit, logit.fit,
type = "text",star.cutoffs = c(0.05, 0.01, 0.001),
title="Logistic Regression", digits=4)
# McFadden R2
# install.packages("pscl")
library(pscl)
pR2(logit.fit)
# Fit the null model
logit.null.fit <- glm(default ~1,family=binomial(link='logit'),data=Default)
# Show the log likelihood of the null model
logLik(logit.null.fit)
# Manually calculate McFadden pseudo R squared
cat("McFadden pseudo R2 = ", 1-logLik(logit.fit)/logLik(logit.null.fit))
# Calculate probability of default
logit.probs <- predict(logit.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=Default$default)
# Calculate probability of default
logit.probs <- predict(logit.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=Default$default)
# Calculate in-sample prediction accuracy
mean(logit.pred == Default$default)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),Default$default, positive = "Yes")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
logit1.fit <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = credit_csv)
summary(logit1.fit)
# Logistic regression
logit1.fit <- glm(class ~ foreign_worker,
family=binomial(link='logit'),data = credit_csv)
summary(logit1.fit)
# Calculate probability of default
logit.probs <- predict(logit1.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=credit_csv$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),credit_csv$class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.probs),credit_csv$class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),credit_csv$class, positive = "Yes")
logit.pred
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=credit_csv$class)
# Calculate probability of default
logit.probs <- predict(logit1.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=credit_csv$class)
logit.pred
logit.probs
# Logistic regression
logit1.fit <- glm(class ~ foreign_worker,
family=binomial(link='logit'),data = credit_csv)
summary(logit1.fit)
logit1.fit <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = credit_csv)
summary(logit1.fit)
# Calculate probability of default
logit.probs <- predict(logit1.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=credit_csv$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),credit_csv$class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),logit.pred$class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),credit_csv$class, positive = "Yes")
logit.pred
logit1.fit <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit1.fit)
# Calculate probability of default
logit.probs <- predict(logit1.fit,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=credit_csv$class)
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),credit_csv$class, positive = "Yes")
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class, positive = "Yes")
logit.pred
logit.pred <-  factor(logit.pred)
confusionMatrix(factor(logit.pred),test_set$class, positive = "Yes")
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "Yes", "No")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
#table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class, positive = "Yes")
confusionMatrix(factor(logit.pred),test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
logit.pred
str(logit.pred)
library(caret)
library(e1071)
confusionMatrix((logit.pred),test_set$class)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
logit.fit.test <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
logit.fit.test <- LDA(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
library(MASS)
View(credit_csv)
# Calculate probability of default
lda.train.probs <- predict(lda.fit.test,type="response")
library(MASS)
lda.fit.train <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, family = binomial(link = 'logit'), data = test_set)
summary(lda.fit.train)
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train,type="response")
# Calculate probability of default
lda.train.probs <- predict(lda.fit.test,type="response")
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train,type="response")
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train, type="response")
library(MASS)
lda.fit.train <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, family = binomial(link = 'logit'), data = train_set)
summary(lda.fit.train)
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train, type="response")
library(MASS)
lda.fit.train <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
summary(lda.fit.train)
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train, type="response")
# Show the first 10 values
lda.train.probs[1:10]
# Show the first 10 values
lda.train.probs[1:10]
# Show the first 10 values
lda.train.probs[1:10]
# Calculate probability of default
lda.train.probs <- predict(lda.fit.train, type="response")
# Calculate predicted default
lda.train.pred <- ifelse(lda.train.probs >.5, "good", "bad")
lda.fit.train
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
lda.fit
# Calculate probability of default
lda.fit$scrolling
# Calculate probability of default
lda.fit$scaling
# Calculate probability of default
lda.fit$scaling
lda.train.probs <- predict(lda.fit.train, type="response")
lda.pred=predict(lda.fit)
names(lda.pred)
library(caret)
library(e1071)
confusionMatrix(factor(lda.pred),train_set$class)
confusionMatrix(lda.pred$class,train_set$class)
```{r}
qda.fit <- qda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
qda.fit
```{r}
qda.pred = predict(qda.fit,train_set)
```
```{r}
qda.pred = predict(qda.fit, train_set)
```
```{r}
qda.pred <- predict(qda.fit, train_set)
```
```{r}
qda.pred=predict(qda.fit, train_set)
```
qda.pred=predict(qda.fit, train_set)
confusionMatrix(qda.pred$class, train_set$class)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
lda.fit
# Calculate probability of default
lda.fit$scaling
lda.train.probs <- predict(lda.fit.train, type="response")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
lda.fit
# Calculate probability of default
lda.fit$scaling
lda.train.probs <- predict(lda.fit, type="response")
lda.pred=predict(lda.fit)
names(lda.pred)
library(caret)
library(e1071)
confusionMatrix(lda.pred$class,train_set$class)
qda.fit <- qda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
qda.fit
qda.pred=predict(qda.fit, train_set)
confusionMatrix(qda.pred$class, train_set$class)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
lda.fit
# Calculate probability of default
lda.fit$scaling
lda.train.probs <- predict(lda.fit, type="response")
lda.pred=predict(lda.fit)
names(lda.pred)
library(caret)
library(e1071)
confusionMatrix(lda.pred$class,train_set$class)
qda.fit <- qda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
qda.fit
qda.pred=predict(qda.fit, train_set)
confusionMatrix(qda.pred$class, train_set$class)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
# Calculate probability of default
lda.fit$scaling
lda.train.probs <- predict(lda.fit, type="response")
lda.pred=predict(lda.fit)
names(lda.pred)
library(caret)
library(e1071)
confusionMatrix(lda.pred$class,train_set$class)
qda.fit <- qda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
qda.pred=predict(qda.fit, train_set)
confusionMatrix(qda.pred$class, train_set$class)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr)
credit_csv <- read.csv("credit-g.csv", stringsAsFactors = TRUE)
credit_csv %>% filter(class == "good")
library(ggplot2)
ggplot(credit_csv, aes(y=credit_history, group=class, fill=class)) + geom_bar(color="Black", position=position_dodge()) + xlab("Credit History") + ylab("Number of Customers") + ggtitle("Distribution of Credit History Grouped by Class")
ggplot(credit_csv, aes(y=credit_amount, group=class, fill=class )) + geom_boxplot(position=position_dodge())
index <- 1:nrow(credit_csv)
set.seed(123)
train_index <- sample(index, round(length(index)*0.8))
train_set <- credit_csv[train_index,]
test_set <- credit_csv[-train_index,]
logit.fit.train <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = train_set)
summary(logit.fit.train)
logit.fit.test <- glm(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + residence_since + property_magnitude + age + other_payment_plans + housing + existing_credits + job + num_dependents + own_telephone + foreign_worker, family = binomial(link = 'logit'), data = test_set)
summary(logit.fit.test)
# Calculate probability of default
logit.probs <- predict(logit.fit.test,type="response")
# Show the first 10 values
logit.probs[1:10]
# Calculate predicted default
logit.pred <- ifelse(logit.probs >.5, "good", "bad")
logit.pred <-  factor(logit.pred)
# Show confusion matrix
table(Prediction=logit.pred, Truth=test_set$class)
library(caret)
library(e1071)
confusionMatrix(factor(logit.pred),test_set$class)
library(MASS)
lda.fit <- lda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
# Calculate probability of default
lda.train.probs <- predict(lda.fit, type="response")
lda.pred=predict(lda.fit)
names(lda.pred)
library(caret)
library(e1071)
confusionMatrix(lda.pred$class,train_set$class)
qda.fit <- qda(class ~ checking_status + duration + purpose + credit_amount + savings_status + employment + installment_commitment + personal_status + other_parties + other_payment_plans + num_dependents, data = train_set)
qda.pred=predict(qda.fit, train_set)
confusionMatrix(qda.pred$class, train_set$class)
