LDA_fit <- train(Personal_Loan ~ ., data = df,
trControl = fitControl, method = "lda",
verbose=FALSE)
print(LDA_fit)
# In-sample performance
confusionMatrix(LDA_fit)
set.seed(100)
LDA_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="lda", family=binomial(link='logit'),
metric = "ROC")
# print(LDA_fit_rcv)
confusionMatrix(LDA_fit_rcv)
set.seed(100)
LDA_fit <- train(Personal_Loan ~ ., data = df,
trControl = fitControl, method = "lda",
verbose=FALSE)
print(LDA_fit)
# In-sample performance
# confusionMatrix(LDA_fit)
set.seed(100)
LDA_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="lda", family=binomial(link='logit'),
metric = "ROC")
# print(LDA_fit_rcv)
confusionMatrix(LDA_fit_rcv)
print(LDA_fit_rcv)
set.seed(100)
LDA_fit <- train(Personal_Loan ~ ., data = df,
trControl = fitControl, method = "lda",
verbose=FALSE)
print(LDA_fit)
# In-sample performance
# confusionMatrix(LDA_fit)
set.seed(100)
LDA_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="lda", family=binomial(link='logit'),
metric = "ROC")
print(LDA_fit_rcv)
confusionMatrix(LDA_fit_rcv)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'lda'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'loocv'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'LOOCV'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(caret)
df <- read.csv("UniversalBank.csv", stringsAsFactors = TRUE)
str(df)
df$Education <- factor(df$Education, levels = c(1, 2, 3),
labels = c("Undergrad", "Graduate", "Advanced/Professional"))
df$Personal_Loan <- factor(df$Personal_Loan)
df <- select(df, -c(Id, ZIP_Code))
glimpse(df)
fitControl <- trainControl(method = "cv", number = 5)
set.seed(100)
logit_fit <- train(factor(Personal_Loan) ~ ., data = df,trControl = fitControl, family = binomial(link = "logit"))
print(logit_fit)
confusionMatrix(logit_fit)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "2")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
accuracies_cv
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'LOOCV'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'LOOCV'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'svmRadial'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'gmb'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(caret)
df <- read.csv("UniversalBank.csv", stringsAsFactors = TRUE)
str(df)
df$Education <- factor(df$Education, levels = c(1, 2, 3),
labels = c("Undergrad", "Graduate", "Advanced/Professional"))
df$Personal_Loan <- factor(df$Personal_Loan)
df <- select(df, -c(Id, ZIP_Code))
glimpse(df)
fitControl <- trainControl(method = "cv", number = 5)
set.seed(100)
logit_fit <- train(factor(Personal_Loan) ~ ., data = df,trControl = fitControl, family = binomial(link = "logit"))
print(logit_fit)
confusionMatrix(logit_fit)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
accuracies_cv
# Calculate the average balanced accuracy
cat('Balanced Accuracy:\n Mean = ', mean(accuracies_cv),"; ",
'Standard Deviation = ',sd(accuracies_cv), ";\n",
'95% Confidence Interval = [',
mean(accuracies_cv) - sd(accuracies_cv) * 1.96, ", ",
mean(accuracies_cv) + sd(accuracies_cv) * 1.96,"]")
## Train a logistic regression model with repeated 5-fold cross-validation
fitControl_rcv <- trainControl(method = "repeatedcv",
number = 5,
repeats = 200,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(100)
logit_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="glm", family=binomial(link='logit'),
metric = "ROC")
print(logit_fit_rcv)
confusionMatrix(logit_fit_rcv)
set.seed(100)
LDA_fit <- train(Personal_Loan ~ ., data = df,
trControl = fitControl, method = "lda",
verbose=FALSE)
print(LDA_fit)
# In-sample performance
confusionMatrix(LDA_fit)
set.seed(100)
LDA_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="lda", family=binomial(link='logit'),
metric = "ROC")
print(LDA_fit_rcv)
confusionMatrix(LDA_fit_rcv)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'gmb'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
accuracies_cv
# Calculate the average balanced accuracy
cat('Balanced Accuracy:\n Mean = ', mean(accuracies_cv),"; ",\
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
accuracies_cv
# Calculate the average balanced accuracy
cat('Balanced Accuracy:\n Mean = ', mean(accuracies_cv),"; ",
'Standard Deviation = ',sd(accuracies_cv), ";\n",
'95% Confidence Interval = [',
mean(accuracies_cv) - sd(accuracies_cv) * 1.96, ", ",
mean(accuracies_cv) + sd(accuracies_cv) * 1.96,"]")
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- lda(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), method = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), methods = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), method = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- train(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), method = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "prob")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- train(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), method = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "prob")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- train(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'), method = "lda")
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "prob")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(caret)
df <- read.csv("UniversalBank.csv", stringsAsFactors = TRUE)
str(df)
df$Education <- factor(df$Education, levels = c(1, 2, 3),
labels = c("Undergrad", "Graduate", "Advanced/Professional"))
df$Personal_Loan <- factor(df$Personal_Loan)
df <- select(df, -c(Id, ZIP_Code))
glimpse(df)
fitControl <- trainControl(method = "cv", number = 5)
set.seed(100)
logit_fit <- train(factor(Personal_Loan) ~ ., data = df,trControl = fitControl, family = binomial(link = "logit"))
print(logit_fit)
confusionMatrix(logit_fit)
k.folds <- function(k) {
folds <- createFolds(df$Personal_Loan, k = k, list = TRUE, returnTrain = TRUE)
accuracies <- c()
for (i in 1:k) {
model <- glm(Personal_Loan ~ ., data = df[folds[[i]],], family = binomial(link = 'logit'))
pred_prob_cv <- predict(object = model, newdata = df[-folds[[i]],], type = "response")
pred_class_cv <- ifelse(pred_prob_cv > 0.5, 1, 0)
accuracies <- c(accuracies,
confusionMatrix(factor(pred_class_cv),
df[-folds[[i]], ]$Personal_Loan, positive = "1")$byClass['Balanced Accuracy'])
}
accuracies
}
set.seed(100)
accuracies_cv <- k.folds(5)
accuracies_cv
# Calculate the average balanced accuracy
cat('Balanced Accuracy:\n Mean = ', mean(accuracies_cv),"; ",
'Standard Deviation = ',sd(accuracies_cv), ";\n",
'95% Confidence Interval = [',
mean(accuracies_cv) - sd(accuracies_cv) * 1.96, ", ",
mean(accuracies_cv) + sd(accuracies_cv) * 1.96,"]")
## Train a logistic regression model with repeated 5-fold cross-validation
fitControl_rcv <- trainControl(method = "repeatedcv",
number = 5,
repeats = 200,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(100)
logit_fit_rcv <- train(factor(ifelse(Personal_Loan==1, 'Yes', 'No'), levels = c('Yes','No')) ~ .,
data = df,
trControl = fitControl_rcv,
method="glm", family=binomial(link='logit'),
metric = "ROC")
print(logit_fit_rcv)
confusionMatrix(logit_fit_rcv)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(jsonlite)
weblog <- stream_in(file("weblog_clean.jsonlines"))
str(weblog)
weblog$request.datetime <- as.POSIXct(weblog$request.datetime, format = "%Y-%m-%d %H:%M:%S")
summary(weblog)
weekday.freq <- table(weblog$weekday)
sort(weekday.freq)
print("Has the largest number of visits")
weekday.freq %>% which.max()
cross_tabulate <- table(weblog$weekday, weblog$request.uri)
cross_tabulate
print("There are 4407 visits on the faq.html page on Friday")
weblog.barplot <- table(weblog$weekday)
barplot(weblog.barplot, col = rainbow(20), cex.names = .8)
weblog.stacked <- table(weblog$request.method, weblog$request.uri)
barplot(weblog.stacked,
main = "Distributuion of Visits",
col = rainbow(3),
legend = rownames(weblog.stacked))
weblog.piechart <- table(weblog$request.uri)
labels <- paste(names(weblog.piechart),"\n", weblog.piechart, sep = "")
pie(weblog.piechart, labels = labels, col = rainbow(5))
piechart <- round(weblog.piechart/sum(weblog.piechart)*100, digits = 1)
label2 <- paste(names(weblog.piechart), " visits\n", paste(piechart,"%"), sep="")
pie(piechart,
labels = label2,
col=rainbow(length(label2)))
quantile(weblog$response.size)
weblog.barplot <- table(weblog$weekday)
barplot(weblog.barplot, col = rainbow(2), cex.names = .8)
weblog.barplot <- table(weblog$weekday)
barplot(weblog.barplot, col = rainbow(4), cex.names = .8)
