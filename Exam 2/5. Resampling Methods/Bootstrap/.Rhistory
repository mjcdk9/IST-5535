knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
# Read in data
bank <- read.csv("UniversalBank.csv")
# Structure of the dataset
str(bank)
head(bank)
bank$Id <- NULL
bank$ZIP_Code <- NULL
bank$Education <- factor(bank$Education)
# Structure of the dataset
str(bank)
summary(bank)
index <- 1:nrow(bank)
set.seed(123)
train_index <- sample(index, round(length(index)*0.7))
train_set <- bank[train_index,]
test_set <- bank[-train_index,]
# Logistic regression
logit.fit <- glm(Personal_Loan ~ .,
family=binomial(link='logit'), data = train_set)
summary(logit.fit)
logit_test_prob <- predict(logit.fit, newdata = test_set, type="response")
logit_test_pred <- ifelse(logit_test_prob > 0.5, 1, 0)
library(caret)
library(caret)
confusionMatrix(factor(logit_test_pred),factor(test_set$Personal_Loan), positive = "1")
library(MASS)
lda.fit=lda(Personal_Loan ~ ., data = train_set)
lda.fit
lda.pred <- predict(lda.fit, newdata = test_set)
confusionMatrix(factor(lda.pred$class),factor(test_set$Personal_Loan), positive = "1")
# Set the number of bootstraps
n_bootstraps <- 1000
# Initiate vectors of performance metric
bootstrap_acc_logit <- NULL
bootstrap_acc_lda <- NULL
# Set the random number seed
set.seed(100)
for (i in 1:n_bootstraps){
# Get a bootstrap of test dataset
resample_test <- test_set[sample(nrow(test_set), replace = TRUE),]
# Calculate predicted outcome
logit_resample_prob <- predict(logit.fit, newdata = resample_test, type="response")
logit_resample_pred <- ifelse(logit_resample_prob > 0.5, 1, 0)
lda_resample_pred <- predict(lda.fit, newdata = resample_test)
# Calculate accuracy of the logit model using the bootstrap
bootstrap_acc_logit <- c(bootstrap_acc_logit, mean(logit_resample_pred == resample_test$Personal_Loan))
# Calculate f1 score of the logit model using the bootstrap
bootstrap_acc_lda <- c(bootstrap_acc_lda, mean(lda_resample_pred$class == resample_test$Personal_Loan))
}
# Set the number of bootstraps
n_bootstraps <- 1000
# Initiate vectors of performance metric
bootstrap_acc_logit <- NULL
bootstrap_acc_lda <- NULL
# Set the random number seed
set.seed(100)
for (i in 1:n_bootstraps){
# Get a bootstrap of test dataset
resample_test <- test_set[sample(nrow(test_set), replace = TRUE),]
# Calculate predicted outcome
logit_resample_prob <- predict(logit.fit, newdata = resample_test, type="response")
logit_resample_pred <- ifelse(logit_resample_prob > 0.5, 1, 0)
lda_resample_pred <- predict(lda.fit, newdata = resample_test)
# Calculate accuracy of the logit model using the bootstrap
bootstrap_acc_logit <- c(bootstrap_acc_logit, mean(logit_resample_pred == resample_test$Personal_Loan))
# Calculate f1 score of the logit model using the bootstrap
bootstrap_acc_lda <- c(bootstrap_acc_lda, mean(lda_resample_pred$class == resample_test$Personal_Loan))
}
summary(bootstrap_acc_logit)
summary(bootstrap_acc_lda)
# Plot the accuracy
par(mfrow=c(1,2))
hist(bootstrap_acc_logit,main = "Histogram of Logit Accuracy")
hist(bootstrap_acc_lda, main = "Histogram of LDA Accuracy")
cat("95% CI of Logit = ",
"(",
quantile(bootstrap_acc_logit, 0.025),
", ",
quantile(bootstrap_acc_logit, 0.975),
")")
cat("95% CI of LDA = ",
"(",
quantile(bootstrap_acc_lda, 0.025),
", ",
quantile(bootstrap_acc_lda, 0.975),
")")
cat("95% CI of Logit (normal approximation) = ",
"(",
mean(bootstrap_acc_logit)-1.96*sd(bootstrap_acc_logit),
", ",
mean(bootstrap_acc_logit)+1.96*sd(bootstrap_acc_logit),
")")
cat("95% CI of LDA (normal approximation) = ",
"(",
mean(bootstrap_acc_lda, 0.025)-1.96*sd(bootstrap_acc_lda),
", ",
mean(bootstrap_acc_lda, 0.025)+1.96*sd(bootstrap_acc_lda),
")")
