# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Clean the environment
rm(list = ls())
# Read data file
df <- read.csv("Telco-Customer-Churn.csv", stringsAsFactors = TRUE)
# Chunk 3
# Show the head of the dataset
head(df )
# Chunk 4
# Show the structure of the dataset
str(df)
# Chunk 5
# Summary statistics
summary(df)
# Chunk 6
# Remove NAs
df <- na.omit(df)
# Chunk 7
# Load library
library(caret)
# Data partition
set.seed(1234)
trainIndex <- createDataPartition(df$Churn, p = .8, list = FALSE)
train_data <- df[ trainIndex,]
test_data  <- df[-trainIndex,]
cat('Number of observations in training set:', nrow(train_data),'\n',
'Number of observations in test set:', nrow(test_data))
# Chunk 8
# Get information of the "glm"" model
# getModelInfo("glm")
## Train a logistic regression model with 10-fold cross-validation
fitControl <- trainControl(method = "cv",number = 10)
set.seed(123)
logit_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl,
method="glm", family=binomial(link='logit'))
print(logit_fit)
# In-sample performance
confusionMatrix(logit_fit)
## Train a logistic regression model with 10-fold cross-validation
fitControl <- trainControl(method = "cv",number = 10)
set.seed(123)
logit_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl,
method="glm", family=binomial(link='logit'))
print(logit_fit)
# In-sample performance
confusionMatrix(logit_fit)
# Out-of-sample performance
confusionMatrix(predict(logit_fit, newdata = test_data),
test_data$Churn, positive = 'Yes')
# In-sample performance
confusionMatrix(logit_fit)
# Out-of-sample performance
confusionMatrix(predict(logit_fit, newdata = test_data),
test_data$Churn, positive = 'Yes')
## Train Support Vector Machine (Radial Basis Function Kernel) with 10-fold Cross-Validation
set.seed(123)
svmRadial_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "svmRadial",
verbose=FALSE)
train_data
## Train Support Vector Machine (Radial Basis Function Kernel) with 10-fold Cross-Validation
set.seed(123)
svmRadial_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "svmRadial",
verbose=FALSE)
knitr::opts_chunk$set(echo = TRUE)
## Train Support Vector Machine (Radial Basis Function Kernel) with 10-fold Cross-Validation
set.seed(123)
svmRadial_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "svmRadial",
verbose=FALSE)
print(svmRadial_fit)
# In-sample performance
confusionMatrix(svmRadial_fit)
## Train Support Vector Machine (Radial Basis Function Kernel) with 10-fold Cross-Validation
set.seed(123)
svmRadial_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "svmRadial",
verbose=FALSE)
print(svmRadial_fit)
# In-sample performance
confusionMatrix(svmRadial_fit)
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
# Read data file
df <- read.csv("Telco-Customer-Churn.csv", stringsAsFactors = TRUE)
# Show the head of the dataset
head(df )
# Show the structure of the dataset
str(df)
# Summary statistics
summary(df)
# Remove NAs
df <- na.omit(df)
# Load library
library(caret)
# Data partition
set.seed(1234)
trainIndex <- createDataPartition(df$Churn, p = .8, list = FALSE)
train_data <- df[ trainIndex,]
test_data  <- df[-trainIndex,]
cat('Number of observations in training set:', nrow(train_data),'\n',
'Number of observations in test set:', nrow(test_data))
# Get information of the "glm"" model
# getModelInfo("glm")
## Train a logistic regression model with 10-fold cross-validation
fitControl <- trainControl(method = "cv",number = 10)
set.seed(123)
logit_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl,
method="glm", family=binomial(link='logit'))
print(logit_fit)
# In-sample performance
confusionMatrix(logit_fit)
# Out-of-sample performance
confusionMatrix(predict(logit_fit, newdata = test_data),
test_data$Churn, positive = 'Yes')
## Train Support Vector Machine (Radial Basis Function Kernel) with 10-fold Cross-Validation
set.seed(123)
svmRadial_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "svmRadial",
verbose=FALSE)
print(svmRadial_fit)
# In-sample performance
confusionMatrix(svmRadial_fit)
# Plot resampling profile by accuracy
plot(svmRadial_fit)
# Plot resampling profile by kappa statistic
plot(svmRadial_fit, metric = "Kappa")
# Out-of-sample performance
confusionMatrix(predict(svmRadial_fit, newdata = test_data),
test_data$Churn, positive = 'Yes')
# Train GBM with 10-fold Cross-Validation
set.seed(123)
gbm_fit <- train(Churn ~ ., data = train_data[-1],
trControl = fitControl, method = "gbm",
verbose=FALSE)
print(gbm_fit)
confusionMatrix(gbm_fit)
# Plot resampling profile by accuracry
plot(gbm_fit)
# Plot resampling profile by kappa statistic
plot(gbm_fit, metric = "Kappa")
# Out-of-sample performance
confusionMatrix(predict(gbm_fit, newdata = test_data),
test_data$Churn, positive = 'Yes')
# Collect resamples
resamps <- resamples(list(Logit=logit_fit, SVM=svmRadial_fit, GBM = gbm_fit))
# Summarize the resamples
summary(resamps)
# Boxplots of resamples
bwplot(resamps)
# Dot plots of resamples
dotplot(resamps)
difValues <- diff(resamps)
summary(difValues)
bwplot(difValues, layout = c(3, 1))
dotplot(difValues)
accu <- c(confusionMatrix(predict(logit_fit, newdata=test_data),test_data$Churn)$overall['Accuracy'],
confusionMatrix(predict(svmRadial_fit, newdata=test_data),test_data$Churn)$overall['Accuracy'],
confusionMatrix(predict(gbm_fit, newdata=test_data),test_data$Churn)$overall['Accuracy'])
sensi <- c(confusionMatrix(predict(logit_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Sensitivity'],
confusionMatrix(predict(svmRadial_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Sensitivity'],
confusionMatrix(predict(gbm_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Sensitivity'])
speci <- c(confusionMatrix(predict(logit_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Specificity'],
confusionMatrix(predict(svmRadial_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Specificity'],
confusionMatrix(predict(gbm_fit, newdata=test_data),test_data$Churn,positive='Yes')$byClass['Specificity'])
data.frame(Accuracy = round(accu,3),
Sensitivity = round(sensi,3),
Specificity = round(speci,3),
Balanced.Accuracy = round((sensi + speci)/2,3),
row.names = c('Logit','SVM','GBM'))
